{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","this","props","totalCounts","Component","Counter","_this","Fragment","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","Counters","_this$props","onReset","counters","map","components_counter","key","App","state","handleIncrement","localCounters","Object","toConsumableArray","index","indexOf","objectSpread","setState","handleDelete","counterId","filter","c","handleReset","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28908cdd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n// export default Navbar;\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-light bg-light\">\n        <a href=\"#\" className=\"navbar-brand\">\n          Navbar{\" \"}\n          <span className=\"badge badge-pill badge-secondary\">\n            {this.props.totalCounts}\n          </span>\n        </a>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  //   state = {\n  //     value: this.props.counter.value\n  //   };\n\n  //   handleIncrement = product => {\n  //     this.setState({ value: this.state.value + 1 });\n  //   };\n\n  render() {\n    return (\n      <>\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          className=\"btn btn-secondary btn-sm\"\n          onClick={() => this.props.onIncrement(this.props.counter)}\n        >\n          Increment\n        </button>\n        <button\n          className=\"btn btn-danger btn-sm m-2\"\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n        >\n          Delete\n        </button>\n        <br />\n      </>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  // state = {\n  //   counters: [\n  //     { id: 1, value: 0 },\n  //     { id: 2, value: 0 },\n  //     { id: 3, value: 0 },\n  //     { id: 4, value: 0 }\n  //   ]\n  // };\n\n  // handleIncrement = counter => {\n  //   const localCounters = [...this.state.counters];\n  //   const index = localCounters.indexOf(counter);\n  //   localCounters[index] = { ...counter };\n  //   localCounters[index].value += 1;\n  //   this.setState({ counters: localCounters });\n  // };\n\n  // handleDelete = counterId => {\n  //   const localCounters = this.state.counters.filter(c => c.id !== counterId);\n  //   this.setState({ counters: localCounters });\n  // };\n\n  // handleReset = () => {\n  //   const localCounters = this.state.counters.map(c => {\n  //     c.value = 0;\n  //     return c;\n  //   });\n  //   this.setState({ counters: localCounters });\n  // };\n\n  render() {\n    const { onReset, onDelete, onIncrement, counters } = this.props;\n\n    return (\n      <div>\n        <button className=\"btn btn-primary btn-sm m-2\" onClick={onReset}>\n          Reset\n        </button>\n        <br />\n        {counters.map(counter => (\n          <Counter\n            key={counter.id}\n            onIncrement={onIncrement}\n            onDelete={onDelete}\n            counter={counter}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 }\n    ]\n  };\n\n  handleIncrement = counter => {\n    const localCounters = [...this.state.counters];\n    const index = localCounters.indexOf(counter);\n    localCounters[index] = { ...counter };\n    localCounters[index].value += 1;\n    this.setState({ counters: localCounters });\n  };\n\n  handleDelete = counterId => {\n    const localCounters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters: localCounters });\n  };\n\n  handleReset = () => {\n    const localCounters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters: localCounters });\n  };\n\n  render() {\n    return (\n      <>\n        <Navbar\n          totalCounts={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}